name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # master 브랜치에 푸시될 때 실행

jobs:
  build:
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # 리포지토리의 코드를 체크아웃

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '18'  # 사용할 JDK 버전
          distribution: 'temurin'  # JDK 배포판 설정

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew  # gradlew에 실행 권한 부여

      - name: Build with Gradle
        run: ./gradlew build -x test  # Gradle을 사용하여 빌드 및 테스트 실행

      - name: Build Docker image
        run: docker build -t homeseek:latest .  # Docker 이미지를 로컬에서 빌드

      - name: Save Docker image to tar file
        run: docker save -o homeseek.tar homeseek:latest  # Docker 이미지를 tar 파일로 저장

      - name: Transfer Docker image to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$EC2_SSH_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem
          scp -o StrictHostKeyChecking=no -i ec2_key.pem homeseek.tar $EC2_USER@$EC2_HOST:/home/$EC2_USER/

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$EC2_SSH_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem $EC2_USER@$EC2_HOST << 'EOF'
              docker load < /home/$EC2_USER/homeseek.tar
              docker ps -q --filter "ancestor=homeseek:latest" | xargs -r docker stop
              docker ps -aq --filter "ancestor=homeseek:latest" | xargs -r docker rm
              docker run -d -p 8080:8080 \
                  homeseek:latest
          EOF
