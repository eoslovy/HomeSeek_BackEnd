name: CI/CD Pipeline
on:
  push:
    branches:
      - master  # master 브랜치에 push될 때만 실행
jobs:
  build:
    runs-on: ubuntu-latest  # Ubuntu 환경에서 실행
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # GitHub 저장소 코드를 워크플로우에 체크아웃

      - name: Set up JDK
        uses: actions/setup-java@v2  # JDK 18 설정
        with:
          java-version: '18'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v2  # Gradle 빌드 캐시를 저장하여 빌드 속도 향상
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew  # gradlew 파일에 실행 권한 부여
      - name: Build with Gradle
        run: ./gradlew build -x test  # 테스트를 제외하고 프로젝트 빌드
      - name: Build Docker image
        run: docker build -t homeseek:latest .  # Dockerfile을 사용하여 도커 이미지 빌드
      - name: Save Docker image
        run: docker save -o homeseek.tar homeseek:latest  # 도커 이미지를 tar 파일로 저장
      - name: Transfer and Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}  # GitHub secrets에서 EC2 접속 정보 가져오기
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$EC2_SSH_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem
          scp -o StrictHostKeyChecking=no -i ec2_key.pem homeseek.tar $EC2_USER@$EC2_HOST:/home/$EC2_USER/
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem $EC2_USER@$EC2_HOST << EOF
            docker load < /home/${EC2_USER}/homeseek.tar
            docker ps -q --filter "ancestor=homeseek:latest" | xargs -r docker stop
            docker ps -aq --filter "ancestor=homeseek:latest" | xargs -r docker rm
            docker run -d -p 8080:8080 homeseek:latest
            rm /home/${EC2_USER}/homeseek.tar
          EOF